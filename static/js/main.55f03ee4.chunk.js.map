{"version":3,"sources":["data/unlockedDID.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["unlockedDidDocument","id","publicKey","type","controller","publicKeyJwk","kid","kty","crv","x","privateKeyJwk","d","authentication","assertionMethod","capabilityDelegation","capabilityInvocation","console","log","useStyles","makeStyles","theme","root","maxWidth","multiline","fontWeight","fontSize","color","width","textfield","sectionProps","bgcolor","m","p","border","borderColor","borderRadius","Wallet","classes","location","useLocation","useState","challenge","setChallenge","requestURL","setRequestURL","initiateRequestURL","setInitiateRequestURL","didAuthResponse","setDidAuthResponse","credential","setCredential","currentState","setCurrentState","buildRequest","a","presentationOptions","verificationMethod","holderDID","issuer","createIssuer","createAndSignPresentation","verifiablePresentation","JSON","stringify","sendRequest","fetch","method","mode","body","headers","then","res","json","getBackgroundColor","section","getStepMessage","Box","React","useEffect","params","queryString","parse","search","request_url","display","justifyContent","className","Typography","variant","gutterBottom","href","List","component","aria-label","ListItem","ListItemText","inset","primary","secondary","button","FormControl","TextField","label","value","onChange","e","currentTarget","Button","onClick","window","rows","placeholder","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55f03ee4.chunk.js","sourcesContent":["let unlockedDidDocument =\n{\n  id: \"did:web:digitalcredentials.github.io\",\n  publicKey: [\n    {\n      id: \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\",\n      type: \"JsonWebKey2020\",\n      controller: \"did:web:digitalcredentials.github.io\",\n      publicKeyJwk: {\n        kid: \"96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\",\n        kty: \"OKP\",\n        crv: \"Ed25519\",\n        x: \"NCqHLgxwYX0GJO2phSUBHZ-w0Tr5sblr7bCZHZ2ld_I\"\n      },\n      privateKeyJwk: {\n        kid: \"96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\",\n        kty: \"OKP\",\n        crv: \"Ed25519\",\n        x: \"NCqHLgxwYX0GJO2phSUBHZ-w0Tr5sblr7bCZHZ2ld_I\",\n        d: \"dp3-PUAIbYgyHSrCJtelS0vTrkBGMcqOulYmEi_QPmI\"\n      }\n    }\n  ],\n  authentication: [\n    \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\"\n  ],\n  assertionMethod: [\n    \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\"\n  ],\n  capabilityDelegation: [\n    \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\"\n  ],\n  capabilityInvocation: [\n    \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\"\n  ]\n}\n\nunlockedDidDocument['@context'] = \"https://www.w3.org/ns/did/v1\"\n\nconsole.log(unlockedDidDocument)\nexport default unlockedDidDocument","import React, { useState } from 'react';\nimport '../App.css';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { useLocation } from 'react-router-dom'\nimport queryString from 'query-string'\n\nimport { createIssuer } from '@digitalcredentials/sign-and-verify-core'\n\nimport unlockedDidDocument from '../data/unlockedDID'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 1000,\n    },\n    multiline: {\n        fontWeight: 'bold',\n        fontSize: '20px',\n        color: 'purple',\n        width: '50vw'\n    },\n    textfield: {\n        width: '60vw'\n    }\n}));\n\nconst sectionProps = {\n    bgcolor: 'background.paper',\n    m: 4,\n    p: 4,\n    border: 1,\n    borderColor: 'text.primary',\n    borderRadius: 16\n};\n\nfunction Wallet() {\n\n    const classes = useStyles();\n    const location = useLocation();\n\n    const [challenge, setChallenge] = useState('')\n    const [requestURL, setRequestURL] = useState('')\n    const [initiateRequestURL, setInitiateRequestURL] = useState('http://localhost:4010/request?student_id=400000002&batch=first&redirect_uri=http://localhost:3000/wallet')\n    const [didAuthResponse, setDidAuthResponse] = useState('')\n    const [credential, setCredential] = useState('')\n    const [currentState, setCurrentState] = useState(1)\n\n\n    const buildRequest = async () => {\n        const presentationId = '323'  // not sure what this is for\n        const presentationOptions = {\n            verificationMethod: \"did:web:digitalcredentials.github.io#96K4BSIWAkhcclKssb8yTWMQSz4QzPWBy-JsAFlwoIs\",\n            challenge: challenge\n        }\n        const holderDID = unlockedDidDocument.id\n        const issuer = createIssuer(unlockedDidDocument)\n        const verifiablePresentation = await issuer.createAndSignPresentation(null, presentationId, holderDID, presentationOptions);\n        setDidAuthResponse(JSON.stringify(verifiablePresentation, null, 2))\n        setCurrentState(3)\n    }\n\n    const sendRequest = async () => {\n        console.log(didAuthResponse)\n        const res = await fetch(requestURL, {\n            method: \"POST\",\n            mode: 'cors',\n            body: didAuthResponse,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => res.json())\n        setCredential(JSON.stringify(res.credential, null, 2))\n        setCurrentState(4)\n    }\n\n    const initiateRequest = () => {\n        window.location.href = initiateRequestURL;\n    }\n\n    const getBackgroundColor = section => {\n        return currentState === section ? 'lightgreen' : 'background.paper'\n    }\n    const getStepMessage = section => {\n        return currentState === section ? <Box fontWeight=\"fontWeightBold\" m={3}>You appear to be on this step</Box> : null\n    }\n    React.useEffect(() => {\n        const params = queryString.parse(location.search)\n        if (params.request_url && params.challenge) {\n            setCurrentState(2)\n            setChallenge(params.challenge)\n            setRequestURL(params.request_url)\n        } else {\n            setCurrentState(1)\n        }\n    }, [location]);\n\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n            <div className=\"App\" >\n\n                <Box className={classes.root}>\n                    <Typography variant=\"h4\" gutterBottom>\n                        Digital Credentials Consortium Wallet Simulator\n            </Typography>\n                    <Typography>\n                        Use this page to simulate the exchange between the recipient (normally on a mobile) and the issuer.  This page plays the part\n                        of the recipient's phone, especially the Wallet on their phone.  The idea here is to test the issuing server.  The exchange follows\n                        the Digital Credential Consortium's <a href=\"https://github.com/digitalcredentials/docs/blob/main/request/credential_request.md\">Credential Request Flow</a>\n                    </Typography>\n                    <Box {...sectionProps} bgcolor={getBackgroundColor(1)}>\n                        <Typography variant=\"h5\" gutterBottom>Step 1 - Initiate Exchange</Typography>\n                        {getStepMessage(1)}\n                        <Typography gutterBottom>\n                            At this point in the exchange (the beginning), a link will have been given (e.g., emailed)\n                            to the student, like the link below in the 'Initiate Credential Request' field (note the query params on the link).\n                            The student would click this link (in the email) while on their phone, which would send\n                            the request to the issuer's server to start the issuance exchange.  The link\n                            will likely first take the student to some authentication page (and so open a\n                            web browser on the phone). After authentication the issuer will\n                            generate a one time token/challenge, maybe verify the user is entitled to a credential, and then redirect\n                            the request to the redirect_uri that was included as a query parameter\n                            on the original link, adding on two additional query parameters to that link:\n                        </Typography>\n                        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n                            <List component=\"nav\" aria-label=\"secondary mailbox folders\" >\n                                <ListItem >\n                                    <ListItemText inset primary=\"challenge=valueOfToken\" secondary=\"One time token generated by the issuer.\" />\n                                </ListItem>\n                                <ListItem button>\n                                    <ListItemText inset primary=\"request_url=http://....\" secondary=\"The url from which the wallet should request the credential.\" />\n                                </ListItem>\n                            </List>\n                        </Box>\n                        <Typography gutterBottom>\n                            Normally the redirect_uri would be a deep link that opens the Wallet on the recipient's phone, but we instead\n                            make it point to this page, like in the example url below.\n                            Change the example url below to match what you need, e.g., change the server location to yours,\n                            possibly the link in the redirect_uri (if for example you are hosting a copy of this page), and\n                            add in any other query parameters that your issuing server expects.  Then click the button to send off\n                            the request.  It should end up right back at this page (after the redirect), but at Step 2 below.\n                     </Typography>\n                        <Box m={3}>\n                            <FormControl> <TextField className={classes.textfield} p={3} label=\"Initiate Credential Request\" value={initiateRequestURL} onChange={e => setInitiateRequestURL(e.currentTarget.value)} /></FormControl>\n                        </Box>\n                        <Box m={1}>\n                            <Button variant=\"outlined\" color=\"primary\" onClick={initiateRequest}>Send Initial Request</Button></Box>\n                    </Box>\n                    <Box {...sectionProps} p={4} bgcolor={getBackgroundColor(2)}>\n                        <Typography variant=\"h5\" gutterBottom>Step 2 - Redirected into Wallet - Now Build and Sign VerifiablePresentation</Typography>\n                        {getStepMessage(2)}\n                        <Typography gutterBottom>The issuer's server has redirected our intial request from 1 (after authenticating us and generating a one-time token/challenge) to the\n                        the redirect_uri that we supplied as part of the initial url above.  The 'challenge' and 'request_url' that the server has sent us\n                        are shown below.  Now our job (well, the Wallet's job) is to construct a VerifiablePresentation that\n                        includes that challenge, sign the VP, and send it to the request_url.  This does a few things:\n\n                            <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                                <ListItem button>\n                                    <ListItemText primary=\"Submits our DID\" secondary=\"Gives our DID to\n                            the server so it can be included in our credential\"/>\n                                </ListItem>\n                                <ListItem button>\n                                    <ListItemText primary=\"Proves DID ownership\" secondary=\"We sign the VP with our private key proving we own the DID\" />\n                                </ListItem>\n                                <ListItem button>\n                                    <ListItemText primary=\"Proves identity\" secondary=\"Because we include the token we got from authenticating earlier\" />\n                                </ListItem>\n                            </List>\n\n                            This Wallet uses a hardcoded unlocked DID to\n                            sign the Verifiable Presentation (so is only for demonstation).\n\n                            When you are ready, click Build Collection Request to have this Wallet emulator construct and sign the VP (but not send it - that's the next step).</Typography>\n\n\n                        <div>\n                            <FormControl>\n                                <TextField\n                                    label=\"Request URL\"\n                                    value={requestURL}\n                                    onChange={e => setRequestURL(e.currentTarget.value)}\n                                    className={classes.textfield} />\n                            </FormControl>\n                        </div>\n                        <div>\n                            <FormControl> <TextField label=\"Challenge\" value={challenge} onChange={e => setChallenge(e.currentTarget.value)} className={classes.textfield} /></FormControl>\n                        </div>\n\n                        <Box p={3}><Button variant=\"outlined\" color=\"primary\" onClick={buildRequest} >Build and Sign Collection Request</Button></Box>\n                    </Box>\n\n                    <Box {...sectionProps} bgcolor={getBackgroundColor(3)}>\n                        <Typography variant=\"h5\" gutterBottom>Step 3 - Collect the Credential</Typography>\n                        {getStepMessage(3)}\n                        <Typography gutterBottom>Okay then, we (the Wallet) have now constructed our signed Verifiable Presentation (as shown below).\n                        Now you can click 'Send Cred Request' to ship it off to the issuer's server and hopefuly get back our credential (to be\n                        shown in the next step).  The server will verify the VP signature,  check that the challenge matches, check that\n                        the recipient is in fact entitled to a certificate, construct the certificate, sign it, and send it back.\n                    </Typography>\n                        <Box p={3}>\n                            <FormControl> <TextField\n                                className={classes.multiline}\n                                id=\"outlined-multiline-static\"\n                                label=\"DID-Auth-response to send to issuer\"\n                                multiline\n                                rows={23}\n                                variant=\"outlined\"\n                                placeholder=\"Your DID Auth Response will appear here after you click 'Build Cred Request'\"\n                                value={didAuthResponse}\n                                onChange={e => setDidAuthResponse(e.currentTarget.value)}\n                            />\n                            </FormControl>\n                        </Box>\n                        <Typography gutterBottom>\n                            Click 'Send Cred Request' to send the signed verifiable presentation to <Box fontWeight=\"fontWeightBold\">{requestURL}</Box> (the 'request_url the issuer gave us back in Step 2 when it redirected us into the wallet), to\n                            collect our credential.  Again, this request would normally be sent by the wallet.\n                    </Typography>\n                        <Box p={3}>\n                            <Button variant=\"outlined\" color=\"primary\" onClick={sendRequest}>Send Cred Request</Button>\n                        </Box>\n                    </Box>\n                    <Box {...sectionProps} bgcolor={getBackgroundColor(4)}>\n                        <Typography variant=\"h5\" gutterBottom>Step 4 - Admire the Credential</Typography>\n\n                        {getStepMessage(4)}\n                        <Typography gutterBottom>Okay, okay now - we've got our credential!  The Wallet would now store it away for future sharing/admiration.\n                    </Typography>\n                        <div>\n                            <FormControl> <TextField\n                                className={classes.multiline}\n                                id=\"outlined-multiline-static\"\n                                label=\"Returned Credential\"\n                                multiline\n                                rows={30}\n                                variant=\"outlined\"\n                                placeholder=\"The returned credential will be shown here after you click Send Cred Request\"\n                                value={credential}\n                                onChange={e => setCredential(e.currentTarget.value)}\n                            />\n                            </FormControl>\n                        </div>\n                    </Box>\n                </Box>\n            </div>\n\n        </Box>\n\n    );\n}\n\nexport default Wallet;","import React from 'react';\nimport './App.css';\nimport Wallet from './pages/Wallet'\n \nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Switch>\n      <Route path=\"/\">\n        <Wallet/>\n      </Route>\n    </Switch>\n</BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}